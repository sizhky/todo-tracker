{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Todo Tracker Documentation","text":"<p>This is the main documentation for the Todo Tracker project. Navigate through the sections to learn more about how interact with todo-tracker using CLI, API and MCP</p> <p>Here's the high-level architecture of the library</p> <pre><code>graph TD\n    A[(Core.db.SQLite)]\n    B(Core.Settings)\n    C(CRUD)\n    A &lt;--&gt; C\n    B --&gt; C\n    C &lt;--&gt; D(CLI)\n    D &lt;--&gt; E(API) &lt;--&gt; G(WEB)\n    D &lt;--&gt; F(MCP) &lt;--&gt; H(LLM)</code></pre> <p>And here's how todos are being stored in the database</p> <pre><code>erDiagram\n    AREA {\n        int id PK \"Primary Key\"\n        string name \"Unique name of the area\"\n        string description \"Optional description\"\n        datetime created_at \"Timestamp of creation\"\n        datetime updated_at \"Timestamp of last update\"\n    }\n    PROJECT {\n        int id PK \"Primary Key\"\n        string name \"Unique name of the project\"\n        string description \"Optional description\"\n        int area_id FK \"Foreign Key to AREA\"\n        datetime created_at \"Timestamp of creation\"\n        datetime updated_at \"Timestamp of last update\"\n    }\n    TASK {\n        int id PK \"Primary Key\"\n        string title \"Title of the task\"\n        string description \"Optional description\"\n        bool status \"False (pending) or True (done)\"\n        int project_id FK \"Foreign Key to PROJECT\"\n        datetime created_at \"Timestamp of creation\"\n        datetime updated_at \"Timestamp of last update\"\n    }\n\n    AREA ||--o{ PROJECT : \"contains\"\n    PROJECT ||--o{ TASK : \"contains\"</code></pre>"},{"location":"specs/technical-requirements/","title":"Todo Tracker - Technical Requirements Specification","text":""},{"location":"specs/technical-requirements/#overview","title":"Overview","text":"<p>Todo Tracker is a Terminal User Interface (TUI) application built with Python and the Textual library, focusing on task management with time tracking capabilities. The application provides an intuitive interface with keyboard shortcuts and mouse interactions, allowing users to manage tasks and track time efficiently.</p>"},{"location":"specs/technical-requirements/#core-features","title":"Core Features","text":"<ol> <li>Task Management</li> <li>Create, read, update, and delete tasks</li> <li>Task properties: title, description, status, priority, tags</li> <li>Task statuses: TODO, IN_PROGRESS, COMPLETED</li> <li> <p>Priority levels: LOW, MEDIUM, HIGH</p> </li> <li> <p>Time Tracking</p> </li> <li>Start/stop time tracking for tasks with a single click</li> <li>Record start time and end time for each work session</li> <li>Multiple time entries per task</li> <li> <p>Automatic time calculation for total time spent</p> </li> <li> <p>User Interface</p> </li> <li>TUI built with Textual library</li> <li>Mouse interaction support</li> <li>Keyboard shortcuts for all operations</li> <li>Real-time updates and notifications</li> <li> <p>Color-coded priority and status indicators</p> </li> <li> <p>Data Persistence</p> </li> <li>CSV-based storage (initially)</li> <li>Separate CSV files for:<ul> <li>tasks.csv: Task metadata</li> <li>time_entries.csv: Time tracking data</li> <li>tags.csv: Tag management</li> </ul> </li> </ol>"},{"location":"specs/technical-requirements/#technical-architecture","title":"Technical Architecture","text":""},{"location":"specs/technical-requirements/#1-core-components","title":"1. Core Components","text":""},{"location":"specs/technical-requirements/#a-ui-layer-ui","title":"a. UI Layer (ui/)","text":"<ul> <li><code>screen_manager.py</code>: Manages different screens and navigation</li> <li><code>components/</code></li> <li><code>task_list.py</code>: Task list display component</li> <li><code>task_detail.py</code>: Task detail view</li> <li><code>timer_widget.py</code>: Time tracking widget</li> <li><code>status_bar.py</code>: Application status and shortcuts display</li> </ul>"},{"location":"specs/technical-requirements/#b-business-logic-layer-core","title":"b. Business Logic Layer (core/)","text":"<ul> <li><code>task_manager.py</code>: Task CRUD operations</li> <li><code>time_tracker.py</code>: Time tracking logic</li> <li><code>tag_manager.py</code>: Tag management</li> <li><code>shortcuts.py</code>: Keyboard shortcut handling</li> </ul>"},{"location":"specs/technical-requirements/#c-data-layer-data","title":"c. Data Layer (data/)","text":"<ul> <li><code>storage/</code></li> <li><code>csv_handler.py</code>: CSV file operations</li> <li><code>models.py</code>: Data models and schemas</li> <li><code>repositories/</code></li> <li><code>task_repository.py</code>: Task data operations</li> <li><code>time_entry_repository.py</code>: Time entry operations</li> </ul>"},{"location":"specs/technical-requirements/#2-data-models","title":"2. Data Models","text":""},{"location":"specs/technical-requirements/#task","title":"Task","text":"<pre><code>{\n    \"id\": str,\n    \"title\": str,\n    \"description\": str,\n    \"status\": Enum,\n    \"priority\": Enum,\n    \"tags\": List[str],\n    \"created_at\": datetime,\n    \"updated_at\": datetime\n}\n</code></pre>"},{"location":"specs/technical-requirements/#timeentry","title":"TimeEntry","text":"<pre><code>{\n    \"id\": str,\n    \"task_id\": str,\n    \"start_time\": datetime,\n    \"end_time\": datetime,\n    \"duration\": int  # in seconds\n}\n</code></pre>"},{"location":"specs/technical-requirements/#3-key-technical-requirements","title":"3. Key Technical Requirements","text":""},{"location":"specs/technical-requirements/#performance","title":"Performance","text":"<ul> <li>Task list rendering: &lt; 100ms</li> <li>Time tracking precision: 1 second</li> <li>Data save operations: &lt; 500ms</li> </ul>"},{"location":"specs/technical-requirements/#user-interface","title":"User Interface","text":"<ul> <li>Responsive UI with &lt; 50ms input latency</li> <li>Support for terminal resizing</li> <li>Minimum terminal size: 80x24 characters</li> <li>Color support for better visibility</li> </ul>"},{"location":"specs/technical-requirements/#data-storage","title":"Data Storage","text":"<ul> <li>Atomic file operations to prevent data corruption</li> <li>Auto-save feature with configurable intervals</li> <li>Data backup before modifications</li> </ul>"},{"location":"specs/technical-requirements/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"specs/technical-requirements/#1-code-organization","title":"1. Code Organization","text":"<ul> <li>Modular architecture with clear separation of concerns</li> <li>Event-driven design for UI updates</li> <li>Observer pattern for time tracking updates</li> <li>Factory pattern for component creation</li> </ul>"},{"location":"specs/technical-requirements/#2-error-handling","title":"2. Error Handling","text":"<ul> <li>Graceful error recovery</li> <li>User-friendly error messages</li> <li>Logging of all errors and operations</li> <li>Data validation at all layers</li> </ul>"},{"location":"specs/technical-requirements/#3-testing-strategy","title":"3. Testing Strategy","text":"<ul> <li>Unit tests for business logic</li> <li>Integration tests for data operations</li> <li>UI component tests</li> <li>End-to-end testing for critical workflows</li> </ul>"},{"location":"specs/technical-requirements/#development-tools","title":"Development Tools","text":"<ul> <li>Python 3.8+</li> <li>Textual library for TUI</li> <li>pytest for testing</li> <li>black for code formatting</li> <li>pylint for code quality</li> <li>mypy for type checking</li> </ul>"},{"location":"specs/technical-requirements/#future-considerations","title":"Future Considerations","text":"<ol> <li>Database Migration</li> <li>Potential migration to SQLite or PostgreSQL</li> <li> <p>Data migration utilities</p> </li> <li> <p>Feature Extensions</p> </li> <li>Task dependencies</li> <li>Recurring tasks</li> <li>Data export/import</li> <li> <p>Task templates</p> </li> <li> <p>Integration Capabilities</p> </li> <li>Calendar integration</li> <li>External backup support</li> <li>API for external tools</li> </ol>"},{"location":"user-manual/api/","title":"API Reference","text":"<p>You can run </p> <pre><code>make api\n</code></pre> <p>to start a fastapi based uvicorn server on 8765.</p> <p>Since the server routes have been auto-generated, all the api routes have a one-to-one mapping in terms of behaviour with the cli commands. You can visit http://localhost:8765/docs to see all the end-points, or try them yourself by importing Bruno's api-collection from the folder with same name.</p>"},{"location":"user-manual/cli/","title":"CLI Usage Guide","text":"<p>This document provides a reference for all available Command Line Interface (CLI) commands in the <code>td</code> application.  <code>td</code> should be available in your terminal once you <code>pip install -e .</code> the current library.</p>"},{"location":"user-manual/cli/#area-commands","title":"Area Commands","text":"<p>Commands for managing areas. Areas are high-level organizational units.</p>"},{"location":"user-manual/cli/#td-ac-area-create","title":"<code>td ac</code> (area-create)","text":"<p>Create a new area in the database.</p> <pre><code>td ac &lt;area_name&gt; [--description &lt;area_description&gt;]\n</code></pre> <p>Arguments:  - <code>name</code>: Name of the area. Multiple areas can be created by providing comma-separated names. - <code>description</code>: Optional description for the area.</p> <p>Returns: The ID of the created area.</p> <p>Tip</p> <p>You can create multiple areas at once (albeit with no-description or common description for all of them) using a comma-separated name, i.e, </p> <pre><code>td ac area1,area2,area3 --description=\"some common description\"\n</code></pre>"},{"location":"user-manual/cli/#td-al-area-list","title":"<code>td al</code> (area-list)","text":"<p>List all areas in the database with optional pagination.</p> <pre><code>td al [--skip &lt;number&gt;] [--limit &lt;number&gt;]\n</code></pre> <p>Arguments: - <code>skip</code>: Number of records to skip (default: 0). - <code>limit</code>: Maximum number of records to return (default: 100).</p> <p>Returns: Prints the area information to the console.</p>"},{"location":"user-manual/cli/#td-ad-area-delete","title":"<code>td ad</code> (area delete)","text":"<p>Delete an area from the database by its name.</p> <pre><code>td ad &lt;area_name&gt;\n</code></pre> <p>Arguments: *   <code>area</code>: Name of the area to delete. Multiple areas can be deleted by providing comma-separated names.</p> <p>Returns: Prints a confirmation message or error to the console.</p> <p>Tip</p> <p>Just like task creation, you can delete multiple tasks using comma separation</p> <pre><code>td ad area1,area2,area3\n</code></pre>"},{"location":"user-manual/cli/#project-commands","title":"Project Commands","text":"<p>Commands for managing projects. Projects belong to areas and group related tasks.</p>"},{"location":"user-manual/cli/#td-pc-project-create","title":"<code>td pc</code> (project-create)","text":"<p>Create a new project in the database. You can associate it with an existing area by name or ID. If the specified area doesn't exist and you provide a name, it can be auto-created.</p> <pre><code>td pc &lt;project_name&gt; [--description &lt;project_description&gt;] [--area &lt;area_name&gt;] [--area-id &lt;area_id&gt;]\n</code></pre> <p>Arguments: - <code>name</code>: Name of the project. Multiple projects can be created by providing comma-separated names (they will share other specified arguments like description and area). - <code>description</code>: Optional description for the project. - <code>area</code>: Name of the area to associate with the project. If not found, and <code>area_id</code> is not provided, a new area with this name will be created. Defaults to \"default\". - <code>area_id</code>: ID of the area to associate with the project. Takes precedence over <code>area</code> name if both are provided.</p> <p>Returns: The ID of the created project. Prints a confirmation message to the console.</p> <p>Tip</p> <p>Create multiple projects under the same area quickly: <pre><code>td pc \"Project Alpha,Project Beta,Project Gamma\" --area \"Q2 Planning\" --description \"Key projects for Q2\"\n</code></pre> If \"Q2 Planning\" area doesn't exist, it will be created.</p>"},{"location":"user-manual/cli/#td-pl-project-list","title":"<code>td pl</code> (project-list)","text":"<p>List all projects in the database with optional pagination.</p> <pre><code>td pl [--skip &lt;number&gt;] [--limit &lt;number&gt;]\n</code></pre> <p>Arguments: - <code>skip</code>: Number of records to skip (default: 0). - <code>limit</code>: Maximum number of records to return (default: 100).</p> <p>Returns: Prints the project information (name, description, area name) to the console. If no projects are found, a message is displayed.</p>"},{"location":"user-manual/cli/#td-pd-project-delete","title":"<code>td pd</code> (project-delete)","text":"<p>Delete a project from the database by its name.</p> <pre><code>td pd &lt;project_name&gt;\n</code></pre> <p>Arguments: - <code>project</code>: Name of the project to delete. Multiple projects can be deleted by providing comma-separated names.</p> <p>Returns: Prints a confirmation message with the ID of the deleted project or an error to the console.</p> <p>Tip</p> <p>Clean up multiple old projects at once: <pre><code>td pd \"Old Project X,Archived Initiative Y\"\n</code></pre></p>"},{"location":"user-manual/cli/#task-commands","title":"Task Commands","text":"<p>Commands for managing tasks. Tasks belong to projects and represent individual to-do items.</p>"},{"location":"user-manual/cli/#td-tc-task-create","title":"<code>td tc</code> (task-create)","text":"<p>Create a new task in the database. Tasks are associated with projects. If the specified project doesn't exist, it can be auto-created (optionally under a specified new or existing area).</p> <pre><code>td tc &lt;task_title&gt; [--description &lt;task_description&gt;] [--status &lt;0_or_1&gt;] [--project &lt;project_name&gt;] [--project-id &lt;project_id&gt;] [--area &lt;area_name&gt;] [--area-id &lt;area_id&gt;]\n</code></pre> <p>Arguments: - <code>title</code>: Title of the task. Multiple tasks can be created by providing comma-separated titles (they will share other specified arguments). - <code>description</code>: Optional description for the task. - <code>status</code>: Task status (0 = pending, 1 = done). Default is 0 (pending). - <code>project</code>: Name of the project to associate with the task. If not found and <code>project_id</code> is not provided, a new project with this name will be created. Defaults to \"default\". - <code>project_id</code>: ID of the project to associate with the task. Takes precedence over <code>project</code> name. - <code>area</code>: Name of the area to associate with an auto-created project (if <code>project</code> name is new and <code>project_id</code> is not given). - <code>area_id</code>: ID of the area to associate with an auto-created project. Takes precedence over <code>area</code> name for auto-created projects.</p> <p>Returns: Prints a confirmation message with the ID of the created task to the console.</p> <p>Tip</p> <p>Quickly add several tasks to a new or existing project: <pre><code>td tc \"Design homepage,Develop API endpoints,Write tests\" --project \"Website Launch\" --area \"Marketing Q3\"\n</code></pre> If \"Website Launch\" project or \"Marketing Q3\" area don't exist, they will be created.</p>"},{"location":"user-manual/cli/#td-tl-task-list","title":"<code>td tl</code> (task-list)","text":"<p>List all tasks in the database with optional pagination and filtering.</p> <pre><code>td tl [--skip &lt;number&gt;] [--limit &lt;number&gt;] [--pending-only &lt;true_or_false&gt;] [--as-hierarchy &lt;true_or_false&gt;]\n</code></pre> <p>Arguments: - <code>skip</code>: Number of records to skip (default: 0). - <code>limit</code>: Maximum number of records to return (default: 100). - <code>pending_only</code>: If <code>True</code> (default), only show tasks with status 0 (pending). Set to <code>False</code> to see all tasks. - <code>as_hierarchy</code>: If <code>True</code> (default), group tasks by area and project. Set to <code>False</code> for a flat list.</p> <p>Returns: Prints the task information to the console. The format depends on <code>as_hierarchy</code>. If no tasks are found, a message is displayed.</p> <p>Viewing all tasks in a flat list</p> <pre><code>td tl --pending-only False --as-hierarchy False\n</code></pre>"},{"location":"user-manual/cli/#td-td-task-delete","title":"<code>td td</code> (task-delete)","text":"<p>Delete a task from the database by its ID.</p> <pre><code>td td &lt;task_id&gt;\n</code></pre> <p>Arguments: - <code>task_id</code>: ID of the task to delete. Multiple tasks can be deleted by providing comma-separated IDs. Task ID must be an integer.</p> <p>Returns: Prints a confirmation message or error to the console.</p> <p>Tip</p> <p>Remove multiple completed or irrelevant tasks: <pre><code>td td 101,105,112\n</code></pre></p>"},{"location":"user-manual/cli/#td-tt-task-toggle","title":"<code>td tt</code> (task-toggle)","text":"<p>Toggle the status of a task (pending to done, or done to pending) by its ID.</p> <pre><code>td tt &lt;task_id&gt;\n</code></pre> <p>Arguments: - <code>task_id</code>: ID of the task to toggle. Multiple tasks can be toggled by providing comma-separated IDs. Task ID must be an integer.</p> <p>Returns: Prints a confirmation message indicating the new status or an error to the console.</p> <p>Tip</p> <p>Mark several tasks as done in one go: <pre><code>td tt 23,24,27\n</code></pre></p>"},{"location":"user-manual/installation/","title":"Installation","text":"<p>This guide will walk you through the installation process for the <code>td</code> command-line application.</p>"},{"location":"user-manual/installation/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Clone the repository (if you haven't already): <pre><code>git clone https://github.com/sizhky/todo-tracker\ncd todo-tracker\n</code></pre></p> </li> <li> <p>Create a virtual environment (recommended): <pre><code>uv venv -p 3.13\nsource .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install the application <pre><code>uv pip install -e .\n</code></pre></p> </li> </ol> <p>After these steps, the <code>td</code> command should be available in your terminal. </p> <p>Fun-fact</p> <p><code>td</code> is short for <code>todo</code></p> <p>You can verify this by running: <pre><code>td --help\n\nUsage: td [OPTIONS] COMMAND [ARGS]...                                                                                                          \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --install-completion          Install completion for the current shell.                                                                      \u2502\n\u2502 --show-completion             Show completion for the current shell, to copy it or customize the installation.                               \u2502\n\u2502 --help                        Show this message and exit.                                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 ac        Create a new area in the database.                                                                                                 \u2502\n\u2502 al        List all areas in the database with optional pagination.                                                                           \u2502\n\u2502 ad        Delete an area from the database by its name.                                                                                      \u2502\n\u2502 pc        Create a new project in the database.                                                                                              \u2502\n\u2502 pl        List all projects in the database with optional pagination.                                                                        \u2502\n\u2502 pd        Delete a project from the database by its name.                                                                                    \u2502\n\u2502 tc        Create a new task in the database.                                                                                                 \u2502\n\u2502 tl        List all tasks in the database with optional pagination.                                                                           \u2502\n\u2502 td        Delete a task from the database by its id.                                                                                         \u2502\n\u2502 tt        Toggle the status of a task in the database by its id.                                                                             \u2502\n\u2502 onboard   Initialize the database with default areas, projects, and tasks.                                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre></p> <p>You can use <code>td onboard</code> to create a quick list of areas, projects and tasks to play with cli/api/mcp</p> <p>Fun-fact</p> <p>If you have tasks in your database - just <code>td</code> will list them down</p> <pre><code>$ td onboard\n$ td\n                                             title description  id\narea     project                                                  \nhome     gym                     Buy running shoes              18\n         gym                    Get gym membership              19\n         gym                       Join yoga class              20\n         home                      Clean the house              21\n         home                      Organize garage              22\n         home                           Do laundry              23\noffice   clients                 Meet with clients              15\n         clients             Prepare presentations              16\n         clients             Send follow-up emails              17\n         desk                        Organize desk              12\n         desk                        Arrange files              13\n         desk                      Set up computer              14\n         intro      Schedule introductory meetings               8\n         intro        Prepare onboarding documents               9\n         intro            Set up new user accounts              10\n         intro             Review company policies              11\n         supplies                         Buy pens               1\n         supplies              Order printer paper               2\n         supplies                Purchase staplers               3\noutdoor  outdoor                     Go for a walk              24\n         outdoor                       Plan a hike              25\n         outdoor                      Visit a park              26\npersonal food                          Cook dinner              30\n         food                        Prepare lunch              31\n         food                       Make breakfast              32\n         groceries                        Buy milk               4\n         groceries                        Get eggs               5\n         groceries                  Purchase bread               6\n         groceries                     Find cheese               7\n         groceries                   Buy groceries              27\n         groceries                      Plan meals              28\n         groceries                 Organize pantry              29\n</code></pre>"},{"location":"user-manual/mcp/","title":"MCP Guide","text":"<p>You can run </p> <pre><code>make mcp\n</code></pre> <p>to start a fastmcp based server.</p> <p>Since the server tools have been auto-generated, all the tools have a one-to-one mapping in terms of behaviour with the cli commands.</p> <p>You can import the server as shown in the following example</p> <pre><code>{\n  \"mcpServers\": {\n    \"Tasky MCP Server\": {\n      \"transport\": \"stdio\",\n      \"enabled\": true,\n      \"command\": \"/path/to/todo-tracker/.venv/bin/mcp\",\n      \"args\": [\n        \"run\",\n        \"/path/to/todo-tracker/src/td/mcp.py\"\n      ],\n      \"env\": {},\n      \"url\": null\n    }\n  }\n}\n</code></pre> <p>and automate your tasks management using LLMs.</p>"}]}